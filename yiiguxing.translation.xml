<application>
  <component name="AppStorage">
    <histories>
      <item value="on Unbind View Holder" />
      <item value="The given artifact contains a string literal with a package reference 'android.support.v4.content' that cannot be safely rewritten. Libraries using reflection such as annotation processors need to be updated manually to add support for androidx." />
      <item value="iven artifact contains a string literal with a package reference 'android.support.v4.content' that cannot be safely rewritten. Libraries using reflection such as annotation processors need to be updated manually to add support for androidx." />
      <item value="Here are the highlights of this release:" />
      <item value="INSTALL FAILED UPDATE INCOMPATIBLE" />
      <item value="granted" />
      <item value="obsolete" />
      <item value="delta" />
      <item value="interpolated Time" />
      <item value="Dummy" />
      <item value="Dummy View" />
      <item value="reflection" />
      <item value="assigns anchor coordinate from the RecyclerView's padding depending on current * layoutFromEnd value" />
      <item value="Simple data class to keep Anchor information" />
      <item value="Number of pixels that we should fill, in the layout direction." />
      <item value="We calculate everything with View's bounding box (which includes decor and margins) // To calculate correct layout position, we subtract margins." />
      <item value="Chunk" />
      <item value="layout Chunk" />
      <item value="ugly bug fix. should not happen" />
      <item value="max offset we should set is mFastScroll + available" />
      <item value="Number of pixels that it added. Useful for scroll functions" />
      <item value="If true, filling stops in the first focusable new child" />
      <item value="The magic functions :). Fills the given layout, defined by the layoutState. This is fairly * independent from the rest of the {@link android.support.v7.widget.LinearLayoutManager} * and with little change, can be made publicly available as a helper class." />
      <item value="consumed" />
      <item value="layout algorithm" />
      <item value="he final step of the layout where we save the information about views for animations, * trigger animations and do any necessary cleanup." />
      <item value="always make sure we sync them (to ensure mode is exact)" />
      <item value="First 2 steps are done in onMeasure but looks like we have to run again due to // changed size." />
      <item value="predictive" />
      <item value="If necessary, run predictive layout and save its information" />
      <item value="save information about current views" />
      <item value="decide which animation should run" />
      <item value="process adapter updates" />
      <item value="The first step of a layout where we" />
      <item value="Scrap Data" />
      <item value="If you want to recycle views across RecyclerViews, create an instance of RecycledViewPool" />
      <item value="RecycledViewPool lets you share Views between multiple RecyclerViews" />
      <item value="EdgeEffectFactory lets you customize the over-scroll edge effect for RecyclerViews" />
      <item value="bail out if layout is frozen" />
      <item value="set Adapter Internal" />
      <item value="The child of this ViewParent that wants focus. This view * will contain the focused view. It is not necessarily the view that * actually has focus" />
      <item value="The view that is a descendant of child that actually has * focus" />
      <item value="dispatch Provide Structure" />
      <item value="The index of the child to draw this iteration" />
      <item value="iteration" />
      <item value="The current iteration" />
      <item value="Returns the index of the child to draw for this iteration. Override this * if you want to change the drawing order of children. By default, it * returns i." />
      <item value="Returns the focused child of this view, if any. The child may have focus * or contain focus." />
      <item value="Containing" />
      <item value="The view that is a descendant of the RecyclerView" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="797" />
        <entry key="ENGLISH" value="784" />
        <entry key="CHINESE_TRADITIONAL" value="7" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="MALAY" value="6" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ESPERANTO" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Yu Gothic UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
</application>