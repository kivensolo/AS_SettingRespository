<application>
  <component name="AppStorage">
    <histories>
      <item value="The Join specifies the treatment where lines and curve segments * join on a stroked path. The default is MITER." />
      <item value="BUTT" />
      <item value="and does not project beyond it" />
      <item value="and does not project beyond i" />
      <item value="The Cap specifies the treatment for the beginning and ending of * stroked lines and paths. The default is BUTT." />
      <item value="paint's Cap" />
      <item value="Cap" />
      <item value="stroke Cap" />
      <item value="stroke" />
      <item value="Instructs the Kotlin compiler to generate overloads for this function that substitute default parameter values" />
      <item value="Instructs the Kotlin compiler not to generate getters/setters for this property and expose it as a field." />
      <item value="Pass 0 to stroke in hairline mode" />
      <item value="Set the width for stroking" />
      <item value="Visibility Aware Image Button" />
      <item value="Aware" />
      <item value="obsolete" />
      <item value="Dummy View" />
      <item value="appendix" />
      <item value="classifier" />
      <item value="intersects" />
      <item value="Indent" />
      <item value="Ratio" />
      <item value="Parking" />
      <item value="Pack" />
      <item value="space Between Items" />
      <item value="auto Packing" />
      <item value="Observer" />
      <item value="Packing" />
      <item value="Inertial" />
      <item value="duration On Inertial" />
      <item value="Looping" />
      <item value="Loop" />
      <item value="Auto Cycle" />
      <item value="Cycle" />
      <item value="Main entry point for using Flutter in Android applications." />
      <item value="dart Entrypoint Function Name" />
      <item value="The path within the AssetManager where the app will look for assets." />
      <item value="use a {@link DartEntrypoint} to tell * {@link DartExecutor} where to find the Dart code to execute" />
      <item value="To specify a top-level Dart function to execute," />
      <item value="Configures, bootstraps, and starts executing Dart code." />
      <item value="To specify a top-level Dart function to execute, use a {@link DartEntrypoint} to tell * {@link DartExecutor} where to find the Dart code to execute, and which Dart function to use as * the entrypoint. To execute the entrypoint, pass the {@link DartEntrypoint} to * {@link #executeDartEntrypoint(DartEntrypoint)}. * &lt;p&gt; * To specify a Dart callback to execute, use a {@link DartCallback}. A given Dart callback must * be registered with the Dart VM to be invoked by a {@link DartExecutor}. To execute the callback, * pass the {@link DartCallback} to {@link #executeDartCallback(DartCallback)}. * TODO(mattcarroll): add a reference to docs about background/plugin execution * &lt;p&gt; * Once started, a {@link DartExecutor} cannot be stopped. The associated Dart code will execute * until it completes, or until the {@link io.flutter.embedding.engine.FlutterEngine} that owns * this {@link DartExecutor} is destroyed." />
      <item value="Hook for subclasses to easily configure a {@code FlutterEngine}, e.g., register * plugins." />
      <item value="The {@code Fragment} support library adds 100k of binary size to an app, and full-Flutter * apps do not otherwise require that binary hit. Therefore, it was concluded that Flutter * must provide a {@link FlutterActivity} based on the AOSP {@code Activity}, and an independent * {@link FlutterFragment} for add-to-app developers." />
      <item value="One might ask why an {@code Activity} and {@code Fragment} delegate needs to exist. Given * that a {@code Fragment} can be placed within an {@code Activity}, it would make more sense * to use a {@link FlutterFragment} within a {@link FlutterActivity}." />
      <item value="No preferred FlutterEngine was provided" />
      <item value="INCREMENT" />
      <item value="Skim Over" />
      <item value="instantiate" />
      <item value="Could not find method onClick(View) in a parent or ancestor Context for android:onClick attribute defined on view class" />
      <item value="ancestor" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="266" />
        <entry key="ENGLISH" value="266" />
        <entry key="CHINESE_TRADITIONAL" value="7" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="MALAY" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ESPERANTO" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Yu Gothic UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>