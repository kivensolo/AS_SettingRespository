<application>
  <component name="AppStorage">
    <histories>
      <item value="retrieving" />
      <item value="* A collection of static methods for creating new {@link com.bumptech.glide.RequestManager}s or * retrieving existing ones from activities and fragment." />
      <item value="Internal method" />
      <item value="assertions" />
      <item value="Preconditions" />
      <item value="but in practice it will // only occur due to errors with the Fragment lifecycle" />
      <item value="in practice" />
      <item value="Retriever" />
      <item value="get Retriever" />
      <item value="Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the * given size." />
      <item value="with" />
      <item value="A singleton to present a simple static interface" />
      <item value="The entry point for interacting with Glide for Applications" />
      <item value="Tries to intelligently choose a strategy based on the data source" />
      <item value="Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with * {@link #RESOURCE} only." />
      <item value="if this request should attempt to decode cached source data." />
      <item value="Returns true if this request should attempt to decode cached source data" />
      <item value="Returns true if this request should attempt to decode cached resource data." />
      <item value="Set of available caching strategies for media" />
      <item value="Writes resources to disk after they've been decoded." />
      <item value="Writes retrieved data directly to the disk cache before it's decoded." />
      <item value="restore" />
      <item value="Get a View that displays the data at the specified position in the data set. You can either * create a View manually or inflate it from an XML layout file. When the View is inflated, the * parent View (GridView, ListView...) will apply default layout parameters unless you use * {@link android.view.LayoutInflater#inflate(int, android.view.ViewGroup, boolean)} * to specify a root view and to prevent attachment to the root." />
      <item value="The position of the item within the adapter's data set of the item whose view we want." />
      <item value="The position of the item within the adapter's data set of the item whose view * we want." />
      <item value="The old view to reuse, if possible" />
      <item value="The old view to reuse" />
      <item value="The parent that this view will eventually be attached to" />
      <item value="Canvas: trying to use a recycled bitmap android.graphics.Bitmap" />
      <item value="Set the blur radius" />
      <item value="Allocate memory for Renderscript to work with" />
      <item value="Load up an instance of the specific script that we want to use" />
      <item value="FRAGMENT TAG" />
      <item value="USE SEPARATE WINDOW" />
      <item value="Queriable" />
      <item value="support for multiple app processes requires a proper android service&#10;// instead of the shared memory &quot;service&quot; implemented here. Such a service could&#10;// support continuity between fragments of different applications if desired." />
      <item value="which may be in transition" />
      <item value="continuity" />
      <item value="Supports background image continuity between multiple Activities." />
      <item value="size Multiplier" />
      <item value="Multiplier" />
      <item value="acquire" />
      <item value="Recursive" />
      <item value="model may occasionally be null, so to enforce that load() was called, put a boolean rather // than relying on model not to be null." />
      <item value="acquired" />
      <item value="If we're the application level request manager, we may be created on a background thread. // In that case we cannot risk synchronously pausing or resuming requests, so we hack around the // issue by delaying adding ourselves as a lifecycle listener by posting to the main thread. // This should be entirely safe." />
      <item value="Indicates that target's visibility can be relaxed to avoid synthetic methods." />
      <item value="The return value of getAllocationByteCount silently changes for recycled bitmaps from the // internal buffer size to row bytes * height. To avoid random inconsistencies in caches, we // instead assert here." />
      <item value="The return value of getAllocationByteCount silently changes for recycled bitmaps" />
      <item value="Enables or disables adjustment of view bounds on the main image" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="133" />
        <entry key="ENGLISH" value="134" />
        <entry key="CHINESE_TRADITIONAL" value="7" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ESPERANTO" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Yu Gothic UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>