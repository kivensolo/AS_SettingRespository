<application>
  <component name="AppStorage">
    <histories>
      <item value="current always true" />
      <item value="current is always true" />
      <item value="current" />
      <item value="如同安卓的插值器" />
      <item value="插值器名称" />
      <item value="algorithm name" />
      <item value="calculation" />
      <item value="设置转换参数" />
      <item value="设置参数计算的算法" />
      <item value="Transformer" />
      <item value="Transform Algorithm" />
      <item value="I Transform Algorithm" />
      <item value="Bouncing Transform" />
      <item value="Linear Transform" />
      <item value="Pow Transform" />
      <item value="Shaking Transform" />
      <item value="Bouncing Back Transform" />
      <item value="Algorithm" />
      <item value="for compatible" />
      <item value="gap" />
      <item value="Computes the matrix corresponding to the current transformation * and copies it to the supplied matrix object." />
      <item value="Quiver" />
      <item value="peek" />
      <item value="get Anim Rect" />
      <item value="Alphe" />
      <item value="Paint flag that enables dithering when blitting." />
      <item value="DITHER" />
      <item value="DITHER FLAG" />
      <item value="Paint flag that enables bilinear sampling on scaled bitmaps. *" />
      <item value="Paint flag that enables bilinear sampling on scaled bitmaps." />
      <item value="bilinear" />
      <item value="Paint flag that enables bilinear sampling on scaled bitmaps. * * &lt;p&gt;If cleared, scaled bitmaps will be drawn with nearest neighbor * sampling, likely resulting in artifacts. This should generally be on * when drawing bitmaps, unless performance-bound (rendering to software * canvas) or preferring pixelation artifacts to blurriness when scaling * significantly.&lt;/p&gt; * * &lt;p&gt;If bitmaps are scaled for device density at creation time (as * resource bitmaps often are) the filtering will already have been * done.&lt;/p&gt; * * @see #Paint(int) * @see #setFlags(int)" />
      <item value="Stack Blur Algorithm by Mario Klingemann" />
      <item value="stack" />
      <item value="Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License." />
      <item value="Wasabeef" />
      <item value="天气" />
      <item value="weatcher" />
      <item value="artifacts" />
      <item value="RenderScript artifacts" />
      <item value="以下操作是为了避免边缘出现一些 RenderScript 伪影。" />
      <item value="The following manipulation is to avoid some RenderScript artifacts at the edge." />
      <item value="m Downsample Factor" />
      <item value="ceil" />
      <item value="Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement {@link onDraw(android.graphics.Canvas)} instead of overriding this method. If you do need to override this method, call the superclass version. @param canvas The Canvas to which the View is rendered." />
      <item value="Sets up this AnimatorSet to play all of the supplied animations at the same time. This is equivalent to calling {@link play(Animator)} with the first animator in the set and then {@link Builderwith(Animator)} with each of the other animators. Note that an Animator with a {@link AnimatorsetStartDelay(long) startDelay} will not actually start until that delay elapses, which means that if the first animator in the list supplied to this constructor has a startDelay, none of the other animators will start until that first animator's startDelay has elapsed. @param items The animations that will be started simultaneously." />
      <item value="Randomly pick a different start in the array of available images." />
      <item value="Demonstrates" />
      <item value="Demonstrates the use of the blurring view." />
      <item value="shuffle" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3266" />
        <entry key="ENGLISH" value="3276" />
        <entry key="POLISH" value="1" />
        <entry key="DANISH" value="9" />
        <entry key="GERMAN" value="3" />
        <entry key="FRENCH" value="13" />
        <entry key="FILIPINO" value="9" />
        <entry key="FINNISH" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="DUTCH" value="3" />
        <entry key="CZECH" value="6" />
        <entry key="ROMANIAN" value="9" />
        <entry key="MALAY" value="3" />
        <entry key="ZULU" value="2" />
        <entry key="NEPALI" value="1" />
        <entry key="NORWEGIAN" value="5" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="TURKISH" value="6" />
        <entry key="SPANISH" value="9" />
        <entry key="ITALIAN" value="5" />
        <entry key="HINDI" value="13" />
        <entry key="INDONESIAN" value="14" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1656213039730" />
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="primaryLanguage" value="CHINESE" />
      </youdao-translate>
    </option>
  </component>
</application>