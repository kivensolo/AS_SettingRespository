<application>
  <component name="AppStorage">
    <histories>
      <item value="The body of this method is generated in a way you would not otherwise write. // This is done to optimize the compiled bytecode for size and performance." />
      <item value="inferred type is SurfaceHolder? but SurfaceHolder was expected" />
      <item value="user avater" />
      <item value="supervisorScope is needed, so that we can ignore error and continue // here, more than two child jobs are running in parallel under a supervisor, // one child job gets failed, we can continue with other." />
      <item value="supervisor Scope" />
      <item value="do long running tasks" />
      <item value="Learn how to run two long running tasks in parallel using Kotlin Coroutines" />
      <item value="Learn how to do a long running task using Kotlin Coroutines. * If you want to do any of your task in background thread using the Kotlin Coroutines, then this is useful." />
      <item value="cross" />
      <item value="Completes execution of this with coroutine with the specified result." />
      <item value="Continuation" />
      <item value="Runs given block and completes completion with its exception if it occurs. * Rationale: [startCoroutineCancellable] is invoked when we are about to run coroutine asynchronously in its own dispatcher. * Thus if dispatcher throws an exception during coroutine start, coroutine never completes, so we should treat dispatcher exception * as its cause and resume completion." />
      <item value="Internal" />
      <item value="Internal Coroutines Api" />
      <item value="An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself." />
      <item value="This is unstable API and it is subject to change" />
      <item value="A reference that child receives from its parent when it is being cancelled by the parent." />
      <item value="Cause" />
      <item value="Cancellation Cause" />
      <item value="JvmField: Don't use JvmField here to enable R8 optimizations via &quot;assumenosideeffects&quot;" />
      <item value="Experimental" />
      <item value="This meta-annotation determines that an annotation is a part of public API and therefore should be included in the generated * documentation for the element to which the annotation is applied." />
      <item value="Must Be Documented" />
      <item value="Marks declarations that are still **experimental** in coroutines API, which means that the design of the * corresponding declarations has open issues which may (or may not) lead to their changes in the future. * Roughly speaking, there is a chance that those declarations will be deprecated in the near future or * the semantics of their behavior may change in some way that may break some code." />
      <item value="Accumulates entries of this context starting with [initial] value and applying [operation] * from left to right to current accumulator value and each element of this context." />
      <item value="[DEBUG_PROPERTY_NAME] for description of debugging facilities on JVM." />
      <item value="Uncaught exceptions in this coroutine cancel the parent job in the context by default * (unless [CoroutineExceptionHandler] is explicitly specified), which means that when `launch` is used with * the context of another coroutine, then any uncaught exception leads to the cancellation of the parent coroutine." />
      <item value="In this case, * the coroutine [Job] is created in _new_ state. It can be explicitly started with [start][Job.start] function * and will be started implicitly on the first invocation of [join][Job.join]." />
      <item value="An optional [start] parameter can be set to [CoroutineStart.LAZY] to start coroutine _lazily_" />
      <item value="By default, the coroutine is immediately scheduled for execution." />
      <item value="By default, the coroutine is immediately scheduled for execution. * Other start options can be specified via `start` parameter. See [CoroutineStart] for details. * An optional [start] parameter can be set to [CoroutineStart.LAZY] to start coroutine _lazily_. In this case, * the coroutine [Job] is created in _new_ state. It can be explicitly started with [start][Job.start] function * and will be started implicitly on the first invocation of [join][Job.join]." />
      <item value="but it can also be overridden * with a corresponding [coroutineContext] element." />
      <item value="The coroutine context is inherited from a [CoroutineScope]. Additional context elements can be specified with [context] argument. * If the context does not have any dispatcher nor any other [ContinuationInterceptor], then [Dispatchers.Default] is used. * The parent job is inherited from a [CoroutineScope] as well, but it can also be overridden * with a corresponding [coroutineContext] element." />
      <item value="The coroutine context is inherited from a [CoroutineScope]" />
      <item value="Launches a new coroutine without blocking the current thread and returns a reference to the coroutine as a [Job]. * The coroutine is cancelled when the resulting job is [cancelled][Job.cancel]." />
      <item value="invoked in the context of the provided scope" />
      <item value="he coroutine code" />
      <item value="the coroutine code which will be invoked in the context of the provided scope" />
      <item value="coroutine start option. The default value is [CoroutineStart.DEFAULT]." />
      <item value="additional to [CoroutineScope.coroutineContext] context of the coroutine" />
      <item value="The context of this scope." />
      <item value="顺序" />
      <item value="根据频道号进行频道数据排序" />
      <item value="进行频道数据排序" />
      <item value="inclusive" />
      <item value="Tells whether or not this key is valid." />
      <item value="mileage" />
      <item value="Different case" />
      <item value="is Space" />
      <item value="Create a file if it doesn't exist, otherwise delete old file before creating" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="730" />
        <entry key="ENGLISH" value="867" />
        <entry key="POLISH" value="1" />
        <entry key="DANISH" value="6" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="4" />
        <entry key="DUTCH" value="1" />
        <entry key="MALAY" value="2" />
        <entry key="TURKISH" value="4" />
        <entry key="SPANISH" value="4" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="2" />
        <entry key="INDONESIAN" value="5" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="primaryLanguage" value="CHINESE" />
      </youdao-translate>
    </option>
  </component>
</application>