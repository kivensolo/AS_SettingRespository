<application>
  <component name="AppStorage">
    <histories>
      <item value="Containing" />
      <item value="The view that is a descendant of the RecyclerView" />
      <item value="Traverses the ancestors of the given view and returns the item view that contains it and * also a direct child of the RecyclerView" />
      <item value="Traverses the ancestors of the given view" />
      <item value="Traverses the ancestors" />
      <item value="Traverses" />
      <item value="ancestors" />
      <item value="find Containing Item View" />
      <item value="Focus View shakeable end of edge." />
      <item value="Gain" />
      <item value="Scroll to the specified adapter position" />
      <item value="Called after a full layout calculation is finished." />
      <item value="distance" />
      <item value="Layout Prefetch Registry" />
      <item value="If the LayoutManager executes different behavior that should override the default * behavior of scrolling the focused child on screen instead of running alongside it, * this method should return true" />
      <item value="Direct child of the RecyclerView containing the newly focused view" />
      <item value="The RecyclerView hosting this LayoutManager" />
      <item value="If the LayoutManager executes different behavior that should override the default * behavior of scrolling the focused child on screen instead of running alongside it, * this method should return true." />
      <item value="running alongside it" />
      <item value="A LayoutManager wishing to keep focused views aligned in a specific * portion of the view may implement that behavior in an override of this method" />
      <item value="Called when a descendant view of the RecyclerView requests focus." />
      <item value="A LayoutManager wishing to keep focused views aligned in a specific * portion of the view may implement that behavior in an override of this method." />
      <item value="Called when a descendant view of the RecyclerView requests focus" />
      <item value="Circular Reveal" />
      <item value="present" />
      <item value="The visual z position of this view" />
      <item value="This callback will also be called if visible item range changes after a layout * calculation. In that case, dx and dy will be 0." />
      <item value="Callback method to be invoked when the RecyclerView has been scrolled" />
      <item value="This will be * called after the scroll has completed." />
      <item value="FOREVER NS" />
      <item value="The RecyclerView is currently animating to a final position while not under * outside control." />
      <item value="dragged" />
      <item value="The RecyclerView is currently being dragged by outside input such as user touch input" />
      <item value="The RecyclerView is not currently scrolling" />
      <item value="An OnScrollListener can be added to a RecyclerView to receive messages when a scrolling event * has occurred on that RecyclerView" />
      <item value="individual" />
      <item value="readLock() can be work with flush progress in the same time" />
      <item value="This is the class for text whose content is immutable but to which * markup objects can be attached and detached." />
      <item value="will skip focus dispatch and its all children" />
      <item value="assistant thread" />
      <item value="assistant" />
      <item value="Blend Mode" />
      <item value="Call this when something has changed which has invalidated the * layout of this view. This will schedule a layout pass of the view * tree." />
      <item value="artifacts" />
      <item value="@deprecated Use {@link #getArchiveClassifier()}" />
      <item value="Sets the classifier" />
      <item value="strictly" />
      <item value="If you want to append additional elements to the main scope, use [CoroutineScope.plus] operator: * `val scope = MainScope() + CoroutineName(&quot;MyActivity&quot;)`." />
      <item value="context elements" />
      <item value="The resulting scope has [SupervisorJob] and [Dispatchers.Main] context elements" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="745" />
        <entry key="ENGLISH" value="732" />
        <entry key="CHINESE_TRADITIONAL" value="7" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="MALAY" value="6" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ESPERANTO" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Yu Gothic UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
</application>