<application>
  <component name="AppStorage">
    <histories>
      <item value="DEFAULT LOAD FACTOR" />
      <item value="Focusable views found so far" />
      <item value="Add any focusable views that are descendants of this view (possibly * including this view if it is focusable itself) to views." />
      <item value="Add any focusable views that are descendants of this view" />
      <item value="Add any focusable views that are descendants of this view (possibly * including this view if it is focusable itself) to views. If we are in touch mode, * only add views that are also focusable in touch mode." />
      <item value="its descendants" />
      <item value="descendants" />
      <item value="Whether this view or one of its descendants actually took focus" />
      <item value="This is equivalent to calling {@link #requestFocus(int, Rect)} with arguments * {@link #FOCUS_DOWN} and &lt;code&gt;null&lt;/code&gt;" />
      <item value="See also {@link #focusSearch(int)}, which is what you call to say that you * have focus, and you want your parent to look for the next one." />
      <item value="A view will not actually take focus if it is not focusable" />
      <item value="Call this to try to give focus to a specific view or to one of its * descendants." />
      <item value="Adds any focusable views that are descendants of this view (possibly * including this view if it is focusable itself) to views. This method * adds all focusable views regardless if we are in touch mode or * only views focusable in touch mode if we are in touch mode or * only views that can take accessibility focus if accessibility is enabled * depending on the focusable mode parameter." />
      <item value="Gets the parent of this view. Note that the parent is a * ViewParent and not necessarily a View." />
      <item value="Focus Real Direction" />
      <item value="Find the nearest view in the specified direction that can take focus. * This does not actually give focus to that view." />
      <item value="focus" />
      <item value="nearest" />
      <item value="view" />
      <item value="Find the next view to take focus in root's descendants, starting from the view * that currently is focused." />
      <item value="Get the focus finder for this thread." />
      <item value="The algorithm used for finding the next focusable view in a given direction * from a view that currently has focus" />
      <item value="The algorithm used for finding the next focusable view in a given direction * from a view that currently has focus." />
      <item value="algorithm" />
      <item value="The rectangle (in this View's coordinate system) * to give a finer grained hint about where focus is coming from. May be null * if there is no hint." />
      <item value="Otherwise" />
      <item value="it employs a more involved focus search strategy * that differs from other ViewGroups" />
      <item value="it" />
      <item value="virtual" />
      <item value="nextFocusView must not be null" />
      <item value="A new View that can be the next focus after the focused View" />
      <item value="Condition Item View" />
      <item value="The returned ViewTreeObserver observer is not guaranteed to remain * valid for the lifetime of this View. If the caller of this method keeps * a long-lived reference to ViewTreeObserver, it should always check for * the return value of {@link ViewTreeObserver#isAlive()}" />
      <item value="guaranteed" />
      <item value="A ViewTreeObserver should never be instantiated by applications" />
      <item value="A view tree observer is used to register listeners that can be notified of global * changes in the view tree. Such global events include, but are not limited to, * layout of the whole tree, beginning of the drawing pass, touch mode change...." />
      <item value="Such global events include, but are not limited to" />
      <item value="服务器" />
      <item value="service" />
      <item value="fitness" />
      <item value="Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter userInfo" />
      <item value="Regist" />
      <item value="Register" />
      <item value="on Error" />
      <item value="Goss" />
      <item value="APPLICATION_ID is misleading in libraries" />
      <item value="An action name, such as ACTION_VIEW. Application-specific * actions should be prefixed with the vendor's package name." />
      <item value="Fitness" />
      <item value="Joel" />
      <item value="Does all the initial setup of the button such as retrieving all the attributes that were * set in xml and inflating the like button's view and initial state." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="555" />
        <entry key="ENGLISH" value="546" />
        <entry key="CHINESE_TRADITIONAL" value="7" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="MALAY" value="5" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ESPERANTO" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="disableAppKeyNotification" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Yu Gothic UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
</application>