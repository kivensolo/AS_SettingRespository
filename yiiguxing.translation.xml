<application>
  <component name="AppStorage">
    <histories>
      <item value="information elements found in the beacon" />
      <item value="Assignable" />
      <item value="* The created ViewModel is associated with the given scope and will be retained * as long as the scope is alive" />
      <item value="This is more advanced version of {@link Factory} that receives a key specified for requested" />
      <item value="is Assignable From" />
      <item value="Implementations of {@code Factory} interface are responsible to instantiate ViewModels." />
      <item value="Creates a {@link ViewModelProvider}, which retains ViewModels while a scope of given Activity * is alive. More detailed explanation is in {@link ViewModel}. * &lt;p&gt; * It uses the given {@link Factory} to instantiate new ViewModels." />
      <item value="Contributing" />
      <item value="Submit a pull request against the `development` branch" />
      <item value="Push to the branch" />
      <item value="Add your changes to the index" />
      <item value="git checkout -b" />
      <item value="Checkout the development branch" />
      <item value="etrieves the available tracks" />
      <item value="Name of the file. It can include the path of the file. * @return The content type." />
      <item value="Makes a best guess to infer the type from a file name." />
      <item value="mpd" />
      <item value="A boolean that specify whether multiple key session support is enabled" />
      <item value="A boolean that specify whether multiple key session support is enabled. * Default is false." />
      <item value="Progressive" />
      <item value="Progressive Media Source" />
      <item value="A bandwidth based adaptive {@link TrackSelection}, whose selected track is updated to be the one * of highest quality given the current network conditions and the state of the buffer." />
      <item value="Handles a message delivered to the target." />
      <item value="A target for messages" />
      <item value="Builds {@link Renderer} instances for use by a {@link SimpleExoPlayer}." />
      <item value="Extension renderers are indexed after core renderers of the * same type" />
      <item value="Allow use of extension renderers. Extension renderers are indexed before core renderers of the * same type. A {@link TrackSelector} that prefers the first suitable renderer will therefore * prefer to use an extension renderer to a core renderer in the case that both are able to play * a given track." />
      <item value="media Codec Selector" />
      <item value="allowed Video Joining Time Ms" />
      <item value="Use {@link #DefaultRenderersFactory(Context)} and {@link * #setExtensionRendererMode(int)}, and pass {@link DrmSessionManager} directly to {@link * SimpleExoPlayer} or {@link ExoPlayerFactory}." />
      <item value="Modes for using extension renderers. One of {@link #EXTENSION_RENDERER_MODE_OFF}, {@link * #EXTENSION_RENDERER_MODE_ON} or {@link #EXTENSION_RENDERER_MODE_PREFER}." />
      <item value="INSTALL FAILED CONFLICTING PROVIDER" />
      <item value="singer" />
      <item value="fallback To Destructive Migration" />
      <item value="Allows Room to destructively recreate database tables if {@link Migration}s that would * migrate old database schemas to the latest schema version are not found. * &lt;p&gt;" />
      <item value="Asserts that we are not on the main thread." />
      <item value="Disables the main thread query check for Room." />
      <item value="Room ensures that Database is never accessed on the main thread because it may lock the * main thread and trigger an ANR. If you need to access the database from the main thread, * you should always use async alternatives or manually move the call to a background * thread." />
      <item value="It is recommended to have multiple {@code Dao} classes in your codebase depending on the tables * they touch." />
      <item value="An abstract {@code @Dao} class can optionally have a constructor that takes a {@link Database} * as its only parameter." />
      <item value="At compile * time, Room will generate an implementation of this class when it is referenced by a * {@link Database}." />
      <item value="The class marked with {@code @Dao} should either be an interface or an abstract class." />
      <item value="Data Access Objects are the main classes where you define your database interactions. They can * include a variety of query methods." />
      <item value="Instead of running queries on the database directly" />
      <item value="implementation" />
      <item value="receive" />
      <item value="You can receive an implementation of the class via" />
      <item value="Can be empty if the class has a field annotated * with {@link PrimaryKey}" />
      <item value="If a field is {@code transient}, it is automatically ignored &lt;b&gt;unless&lt;/b&gt; it is annotated with * {@link ColumnInfo}, {@link Embedded} or {@link Relation}" />
      <item value="If a field is {@code transient}, it is automatically ignored &lt;b&gt;unless&lt;/b&gt; it is annotated with * {@link ColumnInfo}, {@link Embedded} or {@link Relation}." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="94" />
        <entry key="ENGLISH" value="169" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="autoPlayTTS" value="true" />
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="ttsSource" value="TRANSLATION" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="appKeyConfigured" value="true" />
        <option name="primaryLanguage" value="ENGLISH" />
      </youdao-translate>
    </option>
  </component>
</application>